<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>javascript on Meijin's Tech Tips</title><link>https://tech-memo.meijin.dev/tags/javascript/</link><description>Recent content in javascript on Meijin's Tech Tips</description><image><url>https://tech-memo.meijin.dev/site-feature-image.png</url><link>https://tech-memo.meijin.dev/site-feature-image.png</link></image><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Thu, 16 Sep 2021 10:03:00 +0900</lastBuildDate><atom:link href="https://tech-memo.meijin.dev/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>どうやってZennは本文中のURLを動的にOGP画像つきのCardにしているのか</title><link>https://tech-memo.meijin.dev/posts/how-to-include-dynamic-site-card/</link><pubDate>Thu, 16 Sep 2021 10:03:00 +0900</pubDate><guid>https://tech-memo.meijin.dev/posts/how-to-include-dynamic-site-card/</guid><description>Zennの記事では、本文中のURLがカードとして表示される。
https://zenn.dev/meijin/articles/linaria-class-name-config
これは初期ロード時はPlaceholderが掛かっているため、フロントエンドで動的に表示できていると推測できる。
この仕組みを少しだけ調査したのでメモ。
Zenn本体のソースは公開されていないはずだが、CLIのソースは公開されているため、ほぼ同様の技術とみなして調査できる。
markdownをHTMLにパースするときに、URLを見つけたらiframeに変換している。
https://github.dev/zenn-dev/zenn-editor/blob/43d8da8b77456c72f3b820f6e5df4ccf69d14ea9/packages/zenn-markdown-html/src/utils/md-linkify-to-card.ts
// 以下の2つをどちらも満たした場合にリンク化 // 1. パラグラフ先頭 もしくは リンクの前が br // 2. パラグラフの末尾 もしくは リンクの後が br const shouldConvertToCard = (isStartOfLine || isPrevBr) &amp;amp;&amp;amp; (isEndOfLine || isNextBr); if (!shouldConvertToCard) { newTokens.push(token); // 変換は行わずに出力結果に含める return; } // 埋め込み用のHTMLを生成 const embedToken = new Token(&amp;#39;html_inline&amp;#39;, &amp;#39;&amp;#39;, 0); if (isTweetUrl(url)) { embedToken.content = generateTweetHtml(url); } else if (isYoutubeUrl(url)) { embedToken.content = generateYoutubeHtmlFromUrl(url); } else { embedToken.</description></item><item><title>react-hook-formで入力内容の変更を追跡する</title><link>https://tech-memo.meijin.dev/posts/react-hook-form-watch/</link><pubDate>Tue, 14 Sep 2021 22:08:51 +0900</pubDate><guid>https://tech-memo.meijin.dev/posts/react-hook-form-watch/</guid><description>useFormの返り値でwatchが手に入るのでそれを使う
https://react-hook-form.com/api/useform/watch/</description></item><item><title>jestで各テストケースの前にかならずモックをクリアする</title><link>https://tech-memo.meijin.dev/posts/jest-mock-clear-always/</link><pubDate>Tue, 14 Sep 2021 22:08:15 +0900</pubDate><guid>https://tech-memo.meijin.dev/posts/jest-mock-clear-always/</guid><description>https://jestjs.io/ja/docs/configuration#clearmocks-boolean
jest.config.jsに
clearMocks: true を書き足す</description></item><item><title>Dayjsのコンストラクタに渡せる、Date型とか文字列型のUnion型はDayjs側で提供されている</title><link>https://tech-memo.meijin.dev/posts/dayjs-types-tips/</link><pubDate>Tue, 14 Sep 2021 22:03:00 +0900</pubDate><guid>https://tech-memo.meijin.dev/posts/dayjs-types-tips/</guid><description>ConfigTypeという型がエクスポートされています。
https://kossy-web-engineer.hatenablog.com/entry/2020/09/01/223101</description></item></channel></rss>